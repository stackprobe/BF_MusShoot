enum derno_et
{
	D_DUMMY,

	ENUM_RANGE(D_PSHOT_NORMAL_00, 4)
	ENUM_RANGE(D_PSHOT_LV2_00, 4)
	ENUM_RANGE(D_PSHOT_LV3_00, 4)

	ENUM_RANGE(D_ASCII_MINI_00, 64)
	ENUM_RANGE(D_ASCII_00, 64)

	D_MODE_NORMAL,
	D_MODE_MODE,
	D_MODE_EXTRA_00,
	D_MODE_EXTRA_01,

	ENUM_RANGE(D_FACE_00, 12)

	// 00 - (KABE_NUM - 1)
	ENUM_RANGE(D_KABE_00_00, KABE_W * KABE_H)
	ENUM_RANGE(D_KABE_01_00, KABE_W * KABE_H)
	ENUM_RANGE(D_KABE_02_00, KABE_W * KABE_H)
	ENUM_RANGE(D_KABE_03_00, KABE_W * KABE_H)
	ENUM_RANGE(D_KABE_04_00, KABE_W * KABE_H)
	ENUM_RANGE(D_KABE_05_00, KABE_W * KABE_H)
	ENUM_RANGE(D_KABE_06_00, KABE_W * KABE_H)
	ENUM_RANGE(D_KABE_07_00, KABE_W * KABE_H)
	ENUM_RANGE(D_KABE_08_00, KABE_W * KABE_H)

	ENUM_RANGE(D_PLAYER_CRASH_00, 4)
	ENUM_RANGE(D_PLAYER_DEATH_00, 4)

	D_LASER,
	ENUM_RANGE(D_ROCK_HAMMER_TAIL_00, ROCK_HAMMER_TAIL_MAX)

	ENUM_RANGE(D_ESHOT_00_R_00_OLD, ESHOT_PIC_MAX) // Regular Size
	ENUM_RANGE(D_ESHOT_00_S_00_OLD, ESHOT_PIC_MAX) // Small Size
	ENUM_RANGE(D_ESHOT_01_R_00_OLD, ESHOT_PIC_MAX)
	ENUM_RANGE(D_ESHOT_01_S_00_OLD, ESHOT_PIC_MAX)
	ENUM_RANGE(D_ESHOT_02_R_00_OLD, ESHOT_PIC_MAX)
	ENUM_RANGE(D_ESHOT_02_S_00_OLD, ESHOT_PIC_MAX)
	ENUM_RANGE(D_ESHOT_03_R_00_OLD, ESHOT_PIC_MAX)
	ENUM_RANGE(D_ESHOT_03_S_00_OLD, ESHOT_PIC_MAX)
	ENUM_RANGE(D_ESHOT_04_R_00_OLD, ESHOT_PIC_MAX)
	ENUM_RANGE(D_ESHOT_04_S_00_OLD, ESHOT_PIC_MAX) // == D_ESHOT_(ESHOT_COLOR_MAX - 1)_S_00

	D_MAX, // num of member
};

int Der(int derno);
void ReleaseDer(int parent_pic);
